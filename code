<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI ABC Challenge: Complete AI Ethics Adventure</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: #ffffff;
            color: #333333;
            min-height: 100vh;
            overflow-x: hidden;
            position: relative;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 0;
            border-bottom: 1px solid #e0e0e0;
            margin-bottom: 30px;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .logo-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: 0 0 15px rgba(39, 71, 157, 0.3);
        }
        
        .logo-text {
            font-size: 28px;
            font-weight: 700;
            background: linear-gradient(to right, #27479d, #00cc8e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 15px;
            background: #f5f7fa;
            padding: 10px 20px;
            border-radius: 30px;
            border: 1px solid #e0e0e0;
        }
        
        .xp-badge {
            display: flex;
            align-items: center;
            gap: 5px;
            background: rgba(39, 71, 157, 0.1);
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: 600;
        }
        
        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.3s ease;
        }
        
        .avatar:hover {
            transform: scale(1.1);
        }
        
        .hero {
            text-align: center;
            padding: 40px 20px;
            margin-bottom: 40px;
            background: #f5f7fa;
            border-radius: 20px;
            border: 1px solid #e0e0e0;
            position: relative;
            overflow: hidden;
        }
        
        h1 {
            font-size: 3.5rem;
            margin-bottom: 20px;
            background: linear-gradient(to right, #27479d, #00cc8e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .subtitle {
            font-size: 1.4rem;
            max-width: 800px;
            margin: 0 auto 30px;
            color: #555555;
            line-height: 1.6;
        }
        
        .game-dashboard {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 50px;
        }
        
        @media (max-width: 1100px) {
            .game-dashboard {
                grid-template-columns: 1fr;
            }
        }
        
        .dashboard-panel {
            background: #ffffff;
            border-radius: 20px;
            padding: 30px;
            border: 1px solid #e0e0e0;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease;
        }
        
        .dashboard-panel:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }
        
        .panel-header {
            display: flex;
            align-items: center;
            gap: 15px;
            margin-bottom: 25px;
        }
        
        .panel-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            border-radius: 15px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }
        
        h2 {
            font-size: 2rem;
            background: linear-gradient(to right, #27479d, #00cc8e);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .data-spheres {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-top: 20px;
        }
        
        .sphere-card {
            background: #f8f9fc;
            border-radius: 15px;
            padding: 20px;
            transition: all 0.3s ease;
            border: 1px solid #e0e0e0;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        
        .sphere-card:hover {
            transform: translateY(-5px);
            border-color: #27479d;
            box-shadow: 0 5px 15px rgba(39, 71, 157, 0.1);
        }
        
        .sphere-card::before {
            content: "";
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(39, 71, 157, 0.1), transparent);
            transition: 0.5s;
        }
        
        .sphere-card:hover::before {
            left: 100%;
        }
        
        .sphere-card.completed {
            border: 2px solid #00cc8e;
            box-shadow: 0 0 15px rgba(0, 204, 142, 0.3);
            background: rgba(0, 204, 142, 0.05);
        }
        
        .sphere-icon {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            margin-bottom: 15px;
        }
        
        .sphere-title {
            font-size: 1.3rem;
            font-weight: 600;
            margin-bottom: 10px;
            color: #27479d;
        }
        
        .sphere-concept {
            font-size: 0.9rem;
            color: #555555;
            margin-bottom: 15px;
        }
        
        .sphere-ethics {
            font-size: 0.85rem;
            color: #00cc8e;
            font-style: italic;
        }
        
        .challenge-area {
            background: #f8f9fc;
            border-radius: 15px;
            padding: 25px;
            margin-top: 20px;
            min-height: 400px;
            position: relative;
            overflow: hidden;
            display: none;
        }
        
        .challenge-title {
            font-size: 1.5rem;
            color: #27479d;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .challenge-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            height: 300px;
        }
        
        @media (max-width: 768px) {
            .challenge-content {
                grid-template-columns: 1fr;
                height: auto;
            }
        }
        
        .challenge-description {
            background: #ffffff;
            border-radius: 10px;
            padding: 20px;
            font-size: 0.95rem;
            line-height: 1.6;
            border: 1px solid #e0e0e0;
        }
        
        .challenge-game {
            background: #ffffff;
            border-radius: 10px;
            padding: 20px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            border: 1px solid #e0e0e0;
        }
        
        .challenge-instructions {
            text-align: center;
            margin-bottom: 20px;
            color: #555555;
        }
        
        .challenge-ui {
            width: 100%;
            height: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        
        .sorting-area {
            display: flex;
            gap: 20px;
            margin: 20px 0;
            width: 100%;
            justify-content: center;
        }
        
        .data-category {
            background: #f0f4f9;
            border: 2px dashed #27479d;
            border-radius: 10px;
            padding: 15px;
            min-width: 120px;
            text-align: center;
        }
        
        .data-item {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            border-radius: 5px;
            padding: 10px;
            margin: 5px 0;
            cursor: grab;
            text-align: center;
            font-size: 0.9rem;
            color: white;
            transition: all 0.2s ease;
        }
        
        .data-item:hover {
            transform: scale(1.05);
        }
        
        .data-item.dragging {
            opacity: 0.5;
        }
        
        .bias-tester {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
        }
        
        .profile-card {
            background: #f0f4f9;
            border-radius: 10px;
            padding: 15px;
            margin: 10px 0;
            width: 100%;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border: 1px solid #e0e0e0;
        }
        
        .profile-info {
            display: flex;
            flex-direction: column;
        }
        
        .profile-name {
            font-weight: bold;
            margin-bottom: 5px;
            color: #27479d;
        }
        
        .profile-demographic {
            font-size: 0.8rem;
            color: #555555;
        }
        
        .decision-button {
            padding: 8px 15px;
            border-radius: 20px;
            border: none;
            cursor: pointer;
            font-weight: bold;
            margin: 0 5px;
        }
        
        .approve-btn {
            background: linear-gradient(135deg, #00cc8e, #00aa75);
            color: white;
        }
        
        .deny-btn {
            background: linear-gradient(135deg, #ff6b6b, #ff5252);
            color: white;
        }
        
        .results-panel {
            background: #ffffff;
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            width: 100%;
            border: 1px solid #e0e0e0;
        }
        
        .results-title {
            text-align: center;
            margin-bottom: 10px;
            color: #27479d;
        }
        
        .results-content {
            display: flex;
            justify-content: space-around;
            text-align: center;
        }
        
        .result-item {
            padding: 10px;
        }
        
        .result-value {
            font-size: 1.5rem;
            font-weight: bold;
            color: #00cc8e;
        }
        
        .result-label {
            font-size: 0.8rem;
            color: #555555;
        }
        
        .prompt-input {
            width: 100%;
            background: #f0f4f9;
            border: 1px solid #e0e0e0;
            border-radius: 5px;
            padding: 15px;
            color: #333333;
            font-family: 'Courier New', monospace;
            margin-bottom: 15px;
            min-height: 100px;
        }
        
        .prompt-submit {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            color: white;
            border: none;
            padding: 10px 25px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            margin-top: 10px;
        }
        
        .prompt-result {
            background: #f0f4f9;
            border-radius: 10px;
            padding: 15px;
            margin-top: 15px;
            width: 100%;
            min-height: 100px;
            font-family: 'Courier New', monospace;
            border: 1px solid #e0e0e0;
        }
        
        .network-visual {
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%;
        }
        
        .network-layer {
            display: flex;
            gap: 15px;
            margin: 10px 0;
        }
        
        .neuron {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            color: white;
        }
        
        .neuron.active {
            background: linear-gradient(135deg, #00cc8e, #00aa75);
            transform: scale(1.1);
        }
        
        .slider-container {
            width: 100%;
            margin: 20px 0;
        }
        
        .slider {
            width: 100%;
            height: 10px;
            -webkit-appearance: none;
            background: #e0e0e0;
            border-radius: 5px;
            outline: none;
        }
        
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #27479d;
            cursor: pointer;
        }
        
        .slider-value {
            text-align: center;
            margin-top: 5px;
            color: #27479d;
        }
        
        .privacy-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            width: 100%;
            margin: 20px 0;
        }
        
        .data-cell {
            background: #f0f4f9;
            border-radius: 5px;
            padding: 15px 5px;
            text-align: center;
            cursor: pointer;
            transition: all 0.2s ease;
            font-size: 0.8rem;
            border: 1px solid #e0e0e0;
        }
        
        .data-cell:hover {
            background: #e0e8f0;
        }
        
        .data-cell.pii {
            background: linear-gradient(135deg, #ff6b6b, #ff5252);
            color: white;
        }
        
        .data-cell.protected {
            background: linear-gradient(135deg, #00cc8e, #00aa75);
            color: white;
        }
        
        .cloak-btn {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 20px;
            cursor: pointer;
            font-weight: bold;
            margin-top: 15px;
        }
        
        .capstone-project {
            width: 100%;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .project-steps {
            display: flex;
            flex-direction: column;
            gap: 15px;
            width: 100%;
        }
        
        .step {
            background: #f0f4f9;
            border-radius: 10px;
            padding: 15px;
            border: 1px solid #e0e0e0;
        }
        
        .step-title {
            font-weight: bold;
            margin-bottom: 10px;
            color: #27479d;
        }
        
        .step-content {
            font-size: 0.9rem;
            color: #555555;
        }
        
        .step-actions {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }
        
        .step-btn {
            padding: 5px 15px;
            border-radius: 15px;
            border: none;
            cursor: pointer;
            font-size: 0.8rem;
        }
        
        .complete-btn {
            background: linear-gradient(135deg, #00cc8e, #00aa75);
            color: white;
        }
        
        .level-complete {
            background: rgba(0, 204, 142, 0.1);
            border: 2px solid #00cc8e;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            text-align: center;
        }
        
        .level-complete-title {
            font-size: 1.5rem;
            color: #00cc8e;
            margin-bottom: 15px;
        }
        
        .level-complete-text {
            margin-bottom: 20px;
            color: #555555;
        }
        
        .next-level-btn {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 30px;
            cursor: pointer;
            font-weight: bold;
            font-size: 1.1rem;
            transition: all 0.3s ease;
        }
        
        .next-level-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(39, 71, 157, 0.2);
        }
        
        .drop-zone {
            min-height: 100px;
            border: 2px dashed #27479d;
            border-radius: 5px;
            padding: 10px;
            margin-top: 10px;
        }
        
        .data-items-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            justify-content: center;
            margin-top: 20px;
        }
        
        .grid-world {
            width: 100%;
            height: 100%;
            position: relative;
            background: 
                linear-gradient(90deg, #e0e0e0 1px, transparent 1px),
                linear-gradient(#e0e0e0 1px, transparent 1px);
            background-size: 20px 20px;
        }
        
        .player {
            width: 40px;
            height: 40px;
            background: linear-gradient(135deg, #00cc8e, #00aa75);
            border-radius: 50%;
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            box-shadow: 0 0 10px rgba(0, 204, 142, 0.5);
            transition: all 0.5s ease;
            z-index: 10;
            color: white;
        }
        
        .data-packet {
            width: 30px;
            height: 30px;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            border-radius: 5px;
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            box-shadow: 0 0 8px rgba(39, 71, 157, 0.4);
            cursor: pointer;
            transition: transform 0.2s ease;
            z-index: 5;
            color: white;
        }
        
        .data-packet:hover {
            transform: scale(1.1);
        }
        
        .chimera {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #ff6b6b, #ff5252);
            border-radius: 50%;
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: 0 0 15px rgba(255, 107, 107, 0.5);
            z-index: 3;
            color: white;
        }
        
        .level-indicator {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
            padding: 10px;
            background: rgba(39, 71, 157, 0.1);
            border-radius: 10px;
        }
        
        .level-icon {
            width: 30px;
            height: 30px;
            background: linear-gradient(135deg, #27479d, #00cc8e);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            color: white;
        }
        
        .level-title {
            font-weight: bold;
            font-size: 1.2rem;
            color: #27479d;
        }
        
        .level-desc {
            font-size: 0.9rem;
            color: #555555;
        }
        
        .game-controls {
            display: flex;
            gap: 10px;
            margin-top: 15px;
        }
        
        .control-btn {
            padding: 8px 15px;
            background: rgba(39, 71, 157, 0.1);
            border: 1px solid #e0e0e0;
            border-radius: 20px;
            color: #27479d;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .control-btn:hover {
            background: rgba(39, 71, 157, 0.2);
        }
        
        .control-btn.primary {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            border: none;
            color: white;
        }
        
        .control-btn.primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.1);
        }
        
        .objective-panel {
            background: #f8f9fc;
            border-radius: 15px;
            padding: 20px;
            margin-top: 20px;
            border: 1px solid #e0e0e0;
        }
        
        .objective-title {
            font-size: 1.2rem;
            color: #27479d;
            margin-bottom: 10px;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .objective-list {
            list-style-type: none;
            padding-left: 0;
        }
        
        .objective-item {
            padding: 8px 0;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .objective-item:last-child {
            border-bottom: none;
        }
        
        .objective-item.completed .objective-text {
            text-decoration: line-through;
            color: #888888;
        }
        
        .objective-check {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid #27479d;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .objective-item.completed .objective-check {
            background: #00cc8e;
            border-color: #00cc8e;
        }
        
        .objective-item.completed .objective-check::after {
            content: "✓";
            color: white;
            font-size: 12px;
        }
        
        .objective-text {
            flex: 1;
        }
        
        .xp-gain {
            color: #00cc8e;
            font-weight: bold;
        }
        
        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ffffff;
            border-left: 4px solid #27479d;
            padding: 15px 20px;
            border-radius: 5px;
            transform: translateX(120%);
            transition: transform 0.3s ease;
            z-index: 1000;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
            border: 1px solid #e0e0e0;
        }
        
        .notification.show {
            transform: translateX(0);
        }
        
        .notification.success {
            border-left-color: #00cc8e;
        }
        
        .notification.error {
            border-left-color: #ff6b6b;
        }
        
        .notification.info {
            border-left-color: #27479d;
        }
        
        .notification.warning {
            border-left-color: #ffc107;
        }
        
        .progress-container {
            margin-top: 20px;
            background: #f8f9fc;
            border-radius: 10px;
            padding: 15px;
            border: 1px solid #e0e0e0;
        }
        
        .progress-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .progress-bar {
            height: 10px;
            background: #e0e0e0;
            border-radius: 5px;
            overflow: hidden;
        }
        
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #27479d, #00cc8e);
            border-radius: 5px;
            width: 0%;
            transition: width 0.5s ease;
        }
        
        .sphere-selector {
            display: flex;
            gap: 10px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        
        .sphere-option {
            padding: 8px 15px;
            background: rgba(39, 71, 157, 0.1);
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.9rem;
        }
        
        .sphere-option:hover {
            background: rgba(39, 71, 157, 0.2);
        }
        
        .sphere-option.active {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            font-weight: bold;
            color: white;
        }
        
        footer {
            text-align: center;
            padding: 30px 0;
            margin-top: 50px;
            border-top: 1px solid #e0e0e0;
            color: #555555;
        }
        
        .tagline {
            font-size: 1.2rem;
            margin-top: 10px;
            font-style: italic;
            color: #27479d;
        }
        
        .cta-button {
            background: linear-gradient(135deg, #27479d, #00cc8e);
            color: white;
            border: none;
            padding: 15px 40px;
            font-size: 1.2rem;
            font-weight: 600;
            border-radius: 30px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(39, 71, 157, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .cta-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(39, 71, 157, 0.3);
        }
        
        .cta-button:active {
            transform: translateY(1px);
        }
        
        .cta-button::after {
            content: "";
            position: absolute;
            top: -50%;
            left: -60%;
            width: 20px;
            height: 200%;
            background: rgba(255, 255, 255, 0.3);
            transform: rotate(25deg);
            transition: all 0.6s;
        }
        
        .cta-button:hover::after {
            left: 120%;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <div class="logo-icon">
                    <i class="fas fa-brain"></i>
                </div>
                <div class="logo-text">AI ABC Challenge</div>
            </div>
            <div class="user-info">
                <div class="xp-badge">
                    <i class="fas fa-star"></i>
                    <span>XP: <span id="xp-counter">1,250</span></span>
                </div>
                <div class="avatar" id="avatar">G</div>
            </div>
        </header>
        
        <section class="hero">
            <h1>AI ABC Challenge</h1>
            <p class="subtitle">An immersive educational adventure where you become a "Glitch" in a corrupted digital world, learning AI principles and ethics through hands-on challenges.</p>
            <button class="cta-button pulse" id="start-mission">
                <i class="fas fa-play-circle"></i> Start Your Challenge
            </button>
        </section>
        
        <div class="game-dashboard">
            <div class="dashboard-panel">
                <div class="panel-header">
                    <div class="panel-icon">
                        <i class="fas fa-globe"></i>
                    </div>
                    <h2>Your Mission Path</h2>
                </div>
                <p>Explore seven interconnected domains, each focusing on a core AI concept paired with its ethical implications.</p>
                
                <div class="data-spheres">
                    <div class="sphere-card" data-sphere="1">
                        <div class="sphere-icon">
                            <i class="fas fa-cogs"></i>
                        </div>
                        <div class="sphere-title">The Thinking Machine</div>
                        <div class="sphere-concept">Algorithms & Logic</div>
                        <div class="sphere-ethics">Accountability</div>
                    </div>
                    
                    <div class="sphere-card" data-sphere="2">
                        <div class="sphere-icon">
                            <i class="fas fa-database"></i>
                        </div>
                        <div class="sphere-title">The Learning Algorithm</div>
                        <div class="sphere-concept">Supervised Learning</div>
                        <div class="sphere-ethics">Transparency</div>
                    </div>
                    
                    <div class="sphere-card" data-sphere="3">
                        <div class="sphere-icon">
                            <i class="fas fa-project-diagram"></i>
                        </div>
                        <div class="sphere-title">The Black Box</div>
                        <div class="sphere-concept">Neural Networks</div>
                        <div class="sphere-ethics">Explainability</div>
                    </div>
                    
                    <div class="sphere-card" data-sphere="4">
                        <div class="sphere-icon">
                            <i class="fas fa-balance-scale"></i>
                        </div>
                        <div class="sphere-title">The Biased Code</div>
                        <div class="sphere-concept">Algorithmic Bias</div>
                        <div class="sphere-ethics">Fairness</div>
                    </div>
                    
                    <div class="sphere-card" data-sphere="5">
                        <div class="sphere-icon">
                            <i class="fas fa-user-secret"></i>
                        </div>
                        <div class="sphere-title">The Digital Ghost</div>
                        <div class="sphere-concept">Data Privacy</div>
                        <div class="sphere-ethics">Privacy</div>
                    </div>
                    
                    <div class="sphere-card" data-sphere="6">
                        <div class="sphere-icon">
                            <i class="fas fa-comment-dots"></i>
                        </div>
                        <div class="sphere-title">The Prompt Engineer</div>
                        <div class="sphere-concept">Prompt Engineering</div>
                        <div class="sphere-ethics">Accountability</div>
                    </div>
                    
                    <div class="sphere-card" data-sphere="7">
                        <div class="sphere-icon">
                            <i class="fas fa-user-shield"></i>
                        </div>
                        <div class="sphere-title">The Creator's Responsibility</div>
                        <div class="sphere-concept">Ethical AI Design</div>
                        <div class="sphere-ethics">All Principles</div>
                    </div>
                </div>
                
                <div class="progress-container">
                    <div class="progress-header">
                        <span>Mission Progress</span>
                        <span id="progress-percent">0%</span>
                    </div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="progress-fill"></div>
                    </div>
                </div>
            </div>
            
            <div class="dashboard-panel">
                <div class="panel-header">
                    <div class="panel-icon">
                        <i class="fas fa-gamepad"></i>
                    </div>
                    <h2>Current Challenge</h2>
                </div>
                
                <div class="level-indicator">
                    <div class="level-icon">1</div>
                    <div>
                        <div class="level-title">The Thinking Machine</div>
                        <div class="level-desc">Learn algorithms and logic through interactive challenges</div>
                    </div>
                </div>
                
                <div class="challenge-area" id="challenge-area">
                    <div class="challenge-title" id="challenge-title">Algorithm Challenge</div>
                    <div class="challenge-content">
                        <div class="challenge-description" id="challenge-description">
                            <p>In this challenge, you'll learn about algorithms by collecting data packets that represent fundamental concepts.</p>
                            <p>Algorithms are step-by-step procedures for solving problems. Each command you enter is an algorithm!</p>
                            <p>Move around the grid and collect all data packets to complete this challenge.</p>
                        </div>
                        <div class="challenge-game">
                            <div class="challenge-instructions">Collect all data packets to learn about algorithms</div>
                            <div class="challenge-ui" id="challenge-ui">
                                <div class="grid-world" id="grid-world">
                                    <!-- Grid elements will be generated by JS -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="objective-panel">
                    <div class="objective-title">
                        <i class="fas fa-tasks"></i>
                        <span>Challenge Objectives</span>
                    </div>
                    <ul class="objective-list" id="objectives-list">
                        <li class="objective-item" id="obj-1">
                            <div class="objective-check"></div>
                            <div class="objective-text">Learn what an algorithm is <span class="xp-gain">(+50 XP)</span></div>
                        </li>
                        <li class="objective-item" id="obj-2">
                            <div class="objective-check"></div>
                            <div class="objective-text">Collect 4 data packets representing algorithm concepts <span class="xp-gain">(+100 XP)</span></div>
                        </li>
                        <li class="objective-item" id="obj-3">
                            <div class="objective-check"></div>
                            <div class="objective-text">Complete the algorithm challenge <span class="xp-gain">(+150 XP)</span></div>
                        </li>
                    </ul>
                </div>
                
                <div class="game-controls">
                    <button class="control-btn" id="prev-level"><i class="fas fa-arrow-left"></i> Previous</button>
                    <button class="control-btn primary" id="next-level">Next Level <i class="fas fa-arrow-right"></i></button>
                </div>
            </div>
        </div>
        
        <div class="dashboard-panel">
            <div class="panel-header">
                <div class="panel-icon">
                    <i class="fas fa-map-signs"></i>
                </div>
                <h2>Your Mission Path</h2>
            </div>
            <p>Select a Data-Sphere to explore its challenges and learn its concepts:</p>
            
            <div class="sphere-selector">
                <div class="sphere-option active">The Thinking Machine</div>
                <div class="sphere-option">The Learning Algorithm</div>
                <div class="sphere-option">The Black Box</div>
                <div class="sphere-option">The Biased Code</div>
                <div class="sphere-option">The Digital Ghost</div>
                <div class="sphere-option">The Prompt Engineer</div>
                <div class="sphere-option">The Creator's Responsibility</div>
            </div>
        </div>
        
        <footer>
            <p>AI ABC Challenge: An AI Ethics Educational Adventure</p>
            <p class="tagline">"Other coding classes teach syntax. We teach consequence."</p>
        </footer>
    </div>
    
    <div class="notification" id="notification">
        <div class="notification-content">Challenge started successfully!</div>
    </div>

    <script>
        // Game state
        const gameState = {
            xp: 1250,
            currentLevel: 1,
            playerPosition: { x: 150, y: 150 },
            dataPackets: [
                { id: 1, x: 100, y: 100, collected: false, concept: "Algorithm" },
                { id: 2, x: 200, y: 80, collected: false, concept: "Logic" },
                { id: 3, x: 250, y: 180, collected: false, concept: "Sequence" },
                { id: 4, x: 120, y: 220, collected: false, concept: "Condition" }
            ],
            chimeraPosition: { x: 300, y: 300 },
            collectedConcepts: [],
            objectives: {
                1: false,
                2: false,
                3: false
            },
            challengeCompleted: false,
            completedLevels: [1, 3, 5], // Track completed levels (example)
            missionStarted: false
        };
        
        // Level data
        const levels = [
            {
                id: 1,
                title: "The Thinking Machine",
                description: "Learn algorithms and logic through interactive challenges",
                icon: "fas fa-cogs",
                aiConcept: "Algorithms & Logic",
                ethicsPrinciple: "Accountability",
                objectives: [
                    "Learn what an algorithm is (+50 XP)",
                    "Collect 4 data packets representing algorithm concepts (+100 XP)",
                    "Complete the algorithm challenge (+150 XP)"
                ],
                challengeType: "algorithm"
            },
            {
                id: 2,
                title: "The Learning Algorithm",
                description: "Understand how AI systems are trained with data",
                icon: "fas fa-database",
                aiConcept: "Supervised Learning",
                ethicsPrinciple: "Transparency",
                objectives: [
                    "Learn about training datasets (+50 XP)",
                    "Sort training data by quality (+100 XP)",
                    "Complete the training challenge (+150 XP)"
                ],
                challengeType: "sorting"
            },
            {
                id: 3,
                title: "The Black Box",
                description: "Demystify neural networks and decision-making",
                icon: "fas fa-project-diagram",
                aiConcept: "Neural Networks",
                ethicsPrinciple: "Explainability",
                objectives: [
                    "Understand neural network structure (+50 XP)",
                    "Adjust neuron weights to get correct output (+100 XP)",
                    "Complete the neural network challenge (+150 XP)"
                ],
                challengeType: "neural"
            },
            {
                id: 4,
                title: "The Biased Code",
                description: "Discover and address algorithmic bias",
                icon: "fas fa-balance-scale",
                aiConcept: "Algorithmic Bias",
                ethicsPrinciple: "Fairness",
                objectives: [
                    "Identify sources of bias (+50 XP)",
                    "Test algorithm fairness across demographics (+100 XP)",
                    "Complete the bias audit challenge (+150 XP)"
                ],
                challengeType: "bias"
            },
            {
                id: 5,
                title: "The Digital Ghost",
                description: "Protect data privacy and security",
                icon: "fas fa-user-secret",
                aiConcept: "Data Privacy",
                ethicsPrinciple: "Privacy",
                objectives: [
                    "Learn about PII (Personal Identifiable Information) (+50 XP)",
                    "Identify and protect sensitive data (+100 XP)",
                    "Complete the privacy protection challenge (+150 XP)"
                ],
                challengeType: "privacy"
            },
            {
                id: 6,
                title: "The Prompt Engineer",
                description: "Master interaction with Large Language Models",
                icon: "fas fa-comment-dots",
                aiConcept: "Prompt Engineering",
                ethicsPrinciple: "Accountability",
                objectives: [
                    "Learn effective prompt construction (+50 XP)",
                    "Create prompts for specific outputs (+100 XP)",
                    "Complete the prompt engineering challenge (+150 XP)"
                ],
                challengeType: "prompt"
            },
            {
                id: 7,
                title: "The Creator's Responsibility",
                description: "Design ethical AI applications",
                icon: "fas fa-user-shield",
                aiConcept: "Ethical AI Design",
                ethicsPrinciple: "All Principles",
                objectives: [
                    "Apply all learned concepts (+50 XP)",
                    "Design an ethical AI solution (+100 XP)",
                    "Complete the capstone project (+150 XP)"
                ],
                challengeType: "capstone"
            }
        ];
        
        // DOM Elements
        const xpCounter = document.getElementById('xp-counter');
        const avatar = document.getElementById('avatar');
        const startMissionBtn = document.getElementById('start-mission');
        const notification = document.getElementById('notification');
        const nextLevelBtn = document.getElementById('next-level');
        const prevLevelBtn = document.getElementById('prev-level');
        const objectivesList = document.getElementById('objectives-list');
        const challengeTitle = document.getElementById('challenge-title');
        const challengeDescription = document.getElementById('challenge-description');
        const challengeUI = document.getElementById('challenge-ui');
        const gridWorld = document.getElementById('grid-world');
        const progressFill = document.getElementById('progress-fill');
        const progressPercent = document.getElementById('progress-percent');
        const challengeArea = document.getElementById('challenge-area');
        const sphereCards = document.querySelectorAll('.sphere-card');
        
        // Initialize game
        function initGame() {
            setupEventListeners();
            updateXPDisplay();
            updateLevelDisplay();
            updateObjectivesDisplay();
            updateProgress();
            highlightCompletedLevels();
            renderChallenge();
        }
        
        // Render challenge based on current level
        function renderChallenge() {
            const level = levels[gameState.currentLevel - 1];
            challengeTitle.textContent = `${level.title} Challenge`;
            
            // Clear previous challenge UI
            challengeUI.innerHTML = '';
            
            // Render challenge based on type
            switch(level.challengeType) {
                case "algorithm":
                    renderAlgorithmChallenge();
                    break;
                case "sorting":
                    renderSortingChallenge();
                    break;
                case "neural":
                    renderNeuralChallenge();
                    break;
                case "bias":
                    renderBiasChallenge();
                    break;
                case "privacy":
                    renderPrivacyChallenge();
                    break;
                case "prompt":
                    renderPromptChallenge();
                    break;
                case "capstone":
                    renderCapstoneChallenge();
                    break;
                default:
                    renderAlgorithmChallenge();
            }
        }
        
        // Render Algorithm Challenge
        function renderAlgorithmChallenge() {
            challengeDescription.innerHTML = `
                <p>In this challenge, you'll learn about algorithms by collecting data packets that represent fundamental concepts.</p>
                <p>Algorithms are step-by-step procedures for solving problems. Each command you enter is an algorithm!</p>
                <p>Move around the grid and collect all data packets to complete this challenge.</p>
            `;
            
            // Create grid world
            gridWorld.innerHTML = '';
            
            // Create player
            const player = document.createElement('div');
            player.className = 'player';
            player.id = 'player';
            player.textContent = 'G';
            player.style.left = `${gameState.playerPosition.x}px`;
            player.style.top = `${gameState.playerPosition.y}px`;
            gridWorld.appendChild(player);
            
            // Create Chimera (antagonist)
            const chimera = document.createElement('div');
            chimera.className = 'chimera';
            chimera.id = 'chimera';
            chimera.innerHTML = '<i class="fas fa-dragon"></i>';
            chimera.style.left = `${gameState.chimeraPosition.x}px`;
            chimera.style.top = `${gameState.chimeraPosition.y}px`;
            gridWorld.appendChild(chimera);
            
            // Create data packets
            gameState.dataPackets.forEach(packet => {
                if (!packet.collected) {
                    const packetEl = document.createElement('div');
                    packetEl.className = 'data-packet';
                    packetEl.dataset.id = packet.id;
                    packetEl.textContent = packet.concept.charAt(0);
                    packetEl.style.left = `${packet.x}px`;
                    packetEl.style.top = `${packet.y}px`;
                    gridWorld.appendChild(packetEl);
                    
                    // Add click event to collect packet
                    packetEl.addEventListener('click', () => {
                        collectDataPacket(packet.id);
                    });
                }
            });
        }
        
        // Render Sorting Challenge
        function renderSortingChallenge() {
            challengeDescription.innerHTML = `
                <p>In this challenge, you'll learn about supervised learning by sorting training data.</p>
                <p>AI systems learn from examples called training data. The quality of this data directly affects how well the AI performs.</p>
                <p>Drag and drop data items into the correct categories to train the AI properly.</p>
            `;
            
            challengeUI.innerHTML = `
                <div class="sorting-area">
                    <div class="data-category" id="category-good">
                        <h3>High Quality Data</h3>
                        <div class="drop-zone" id="good-drop"></div>
                    </div>
                    <div class="data-category" id="category-bad">
                        <h3>Low Quality Data</h3>
                        <div class="drop-zone" id="bad-drop"></div>
                    </div>
                </div>
                <div class="data-items-container">
                    <div class="data-item" draggable="true" data-quality="good">Clear, labeled image</div>
                    <div class="data-item" draggable="true" data-quality="bad">Blurry, unlabeled image</div>
                    <div class="data-item" draggable="true" data-quality="good">Accurate text sample</div>
                    <div class="data-item" draggable="true" data-quality="bad">Misleading text sample</div>
                    <div class="data-item" draggable="true" data-quality="good">Verified user feedback</div>
                    <div class="data-item" draggable="true" data-quality="bad">Spam content</div>
                </div>
            `;
            
            // Add drag and drop functionality
            setupSortingChallenge();
        }
        
        // Render Neural Network Challenge
        function renderNeuralChallenge() {
            challengeDescription.innerHTML = `
                <p>In this challenge, you'll explore how neural networks make decisions.</p>
                <p>Neural networks consist of layers of interconnected nodes (neurons) that process information.</p>
                <p>Adjust the weights between neurons to guide the input to the correct output.</p>
            `;
            
            challengeUI.innerHTML = `
                <div class="network-visual">
                    <div class="network-layer">
                        <div class="neuron" id="input-1">1</div>
                        <div class="neuron" id="input-2">0</div>
                        <div class="neuron" id="input-3">1</div>
                    </div>
                    <div class="network-layer">
                        <div class="neuron" id="hidden-1">0.5</div>
                        <div class="neuron" id="hidden-2">0.3</div>
                    </div>
                    <div class="network-layer">
                        <div class="neuron" id="output-1">0.7</div>
                    </div>
                    <div class="slider-container">
                        <input type="range" min="0" max="100" value="50" class="slider" id="weight-slider">
                        <div class="slider-value">Weight: 0.50</div>
                    </div>
                    <button class="control-btn primary" id="test-network">Test Network</button>
                </div>
            `;
            
            // Add neural network functionality
            setupNeuralChallenge();
        }
        
        // Render Bias Challenge
        function renderBiasChallenge() {
            challengeDescription.innerHTML = `
                <p>In this challenge, you'll investigate algorithmic bias in hiring decisions.</p>
                <p>AI systems can perpetuate societal biases present in their training data.</p>
                <p>Test the algorithm with different profiles and analyze the results for fairness.</p>
            `;
            
            challengeUI.innerHTML = `
                <div class="bias-tester">
                    <div class="profile-card">
                        <div class="profile-info">
                            <div class="profile-name">Alex Johnson</div>
                            <div class="profile-demographic">Demographic: Group A</div>
                        </div>
                        <button class="decision-button approve-btn" data-profile="1">Approve</button>
                        <button class="decision-button deny-btn" data-profile="1">Deny</button>
                    </div>
                    <div class="profile-card">
                        <div class="profile-info">
                            <div class="profile-name">Sam Rivera</div>
                            <div class="profile-demographic">Demographic: Group B</div>
                        </div>
                        <button class="decision-button approve-btn" data-profile="2">Approve</button>
                        <button class="decision-button deny-btn" data-profile="2">Deny</button>
                    </div>
                    <div class="profile-card">
                        <div class="profile-info">
                            <div class="profile-name">Jordan Smith</div>
                            <div class="profile-demographic">Demographic: Group A</div>
                        </div>
                        <button class="decision-button approve-btn" data-profile="3">Approve</button>
                        <button class="decision-button deny-btn" data-profile="3">Deny</button>
                    </div>
                    <div class="profile-card">
                        <div class="profile-info">
                            <div class="profile-name">Taylor Kim</div>
                            <div class="profile-demographic">Demographic: Group B</div>
                        </div>
                        <button class="decision-button approve-btn" data-profile="4">Approve</button>
                        <button class="decision-button deny-btn" data-profile="4">Deny</button>
                    </div>
                    <div class="results-panel">
                        <div class="results-title">Bias Analysis Results</div>
                        <div class="results-content">
                            <div class="result-item">
                                <div class="result-value" id="approval-rate-a">0%</div>
                                <div class="result-label">Group A Approval</div>
                            </div>
                            <div class="result-item">
                                <div class="result-value" id="approval-rate-b">0%</div>
                                <div class="result-label">Group B Approval</div>
                            </div>
                            <div class="result-item">
                                <div class="result-value" id="bias-level">0%</div>
                                <div class="result-label">Bias Level</div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Add bias testing functionality
            setupBiasChallenge();
        }
        
        // Render Privacy Challenge
        function renderPrivacyChallenge() {
            challengeDescription.innerHTML = `
                <p>In this challenge, you'll learn about data privacy and protection.</p>
                <p>Personal Identifiable Information (PII) must be protected to respect user privacy.</p>
                <p>Identify which data is sensitive and apply privacy protection measures.</p>
            `;
            
            challengeUI.innerHTML = `
                <div class="privacy-grid">
                    <div class="data-cell" data-type="name">Name</div>
                    <div class="data-cell" data-type="email">Email</div>
                    <div class="data-cell" data-type="phone">Phone</div>
                    <div class="data-cell" data-type="address">Address</div>
                    <div class="data-cell" data-type="age">Age</div>
                    <div class="data-cell" data-type="gender">Gender</div>
                    <div class="data-cell" data-type="preferences">Preferences</div>
                    <div class="data-cell" data-type="purchases">Purchase History</div>
                    <div class="data-cell" data-type="location">Location</div>
                    <div class="data-cell" data-type="ip">IP Address</div>
                    <div class="data-cell" data-type="device">Device Info</div>
                    <div class="data-cell" data-type="cookies">Cookie Data</div>
                </div>
                <button class="cloak-btn" id="apply-cloak">Apply Privacy Cloak</button>
            `;
            
            // Add privacy functionality
            setupPrivacyChallenge();
        }
        
        // Render Prompt Challenge
        function renderPromptChallenge() {
            challengeDescription.innerHTML = `
                <p>In this challenge, you'll master prompt engineering for Large Language Models.</p>
                <p>Effective prompts guide AI to produce desired outputs while maintaining ethical standards.</p>
                <p>Write prompts to generate specific content while avoiding harmful outputs.</p>
            `;
            
            challengeUI.innerHTML = `
                <textarea class="prompt-input" id="prompt-input" placeholder="Enter your prompt here...">Write a short story about a robot learning to be kind</textarea>
                <button class="prompt-submit" id="submit-prompt">Generate Response</button>
                <div class="prompt-result" id="prompt-result">
                    Your AI response will appear here...
                </div>
            `;
            
            // Add prompt functionality
            setupPromptChallenge();
        }
        
        // Render Capstone Challenge
        function renderCapstoneChallenge() {
            challengeDescription.innerHTML = `
                <p>In this final challenge, you'll apply all your knowledge to design an ethical AI solution.</p>
                <p>You'll create an AI application that solves a real-world problem while addressing ethical concerns.</p>
                <p>Complete each step to demonstrate your mastery of AI principles and ethics.</p>
            `;
            
            challengeUI.innerHTML = `
                <div class="capstone-project">
                    <div class="project-steps">
                        <div class="step">
                            <div class="step-title">1. Define the Problem</div>
                            <div class="step-content">Identify a real-world issue that could benefit from AI assistance.</div>
                            <div class="step-actions">
                                <button class="step-btn complete-btn" data-step="1">Complete</button>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-title">2. Design Ethical Safeguards</div>
                            <div class="step-content">Implement measures to ensure fairness, privacy, and accountability.</div>
                            <div class="step-actions">
                                <button class="step-btn complete-btn" data-step="2">Complete</button>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-title">3. Test for Bias</div>
                            <div class="step-content">Verify that your solution treats all users fairly.</div>
                            <div class="step-actions">
                                <button class="step-btn complete-btn" data-step="3">Complete</button>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-title">4. Document Your Process</div>
                            <div class="step-content">Explain your design decisions and ethical considerations.</div>
                            <div class="step-actions">
                                <button class="step-btn complete-btn" data-step="4">Complete</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Add capstone functionality
            setupCapstoneChallenge();
        }
        
        // Collect data packet
        function collectDataPacket(packetId) {
            const packet = gameState.dataPackets.find(p => p.id === packetId);
            if (packet && !packet.collected) {
                packet.collected = true;
                gameState.collectedConcepts.push(packet.concept);
                const packetEl = document.querySelector(`.data-packet[data-id="${packetId}"]`);
                if (packetEl) {
                    packetEl.style.opacity = '0';
                    packetEl.style.transform = 'scale(0)';
                    setTimeout(() => packetEl.remove(), 300);
                }
                
                // Check if all packets collected
                const allCollected = gameState.dataPackets.every(p => p.collected);
                if (allCollected) {
                    setTimeout(() => {
                        completeObjective(3);
                        showLevelComplete();
                    }, 1000);
                }
                
                // Update objectives
                if (gameState.collectedConcepts.length >= 4) {
                    completeObjective(2);
                }
            }
        }
        
        // Setup sorting challenge
        function setupSortingChallenge() {
            const items = document.querySelectorAll('.data-item');
            const goodDrop = document.getElementById('good-drop');
            const badDrop = document.getElementById('bad-drop');
            
            items.forEach(item => {
                item.addEventListener('dragstart', function(e) {
                    e.dataTransfer.setData('text/plain', this.dataset.quality);
                    this.classList.add('dragging');
                });
                
                item.addEventListener('dragend', function() {
                    this.classList.remove('dragging');
                });
            });
            
            [goodDrop, badDrop].forEach(dropZone => {
                dropZone.addEventListener('dragover', function(e) {
                    e.preventDefault();
                    this.style.backgroundColor = 'rgba(39, 71, 157, 0.1)';
                });
                
                dropZone.addEventListener('dragleave', function() {
                    this.style.backgroundColor = '';
                });
                
                dropZone.addEventListener('drop', function(e) {
                    e.preventDefault();
                    this.style.backgroundColor = '';
                    
                    const quality = e.dataTransfer.getData('text/plain');
                    const correctDrop = (this.id === 'good-drop' && quality === 'good') || 
                                       (this.id === 'bad-drop' && quality === 'bad');
                    
                    if (correctDrop) {
                        showNotification('Correctly sorted data!', 'success');
                        if (!gameState.objectives[2]) {
                            completeObjective(2);
                        }
                    } else {
                        showNotification('Incorrect sorting. Try again.', 'error');
                    }
                });
            });
        }
        
        // Setup neural network challenge
        function setupNeuralChallenge() {
            const slider = document.getElementById('weight-slider');
            const sliderValue = document.querySelector('.slider-value');
            const testButton = document.getElementById('test-network');
            const outputNeuron = document.getElementById('output-1');
            
            slider.addEventListener('input', function() {
                const value = (this.value / 100).toFixed(2);
                sliderValue.textContent = `Weight: ${value}`;
            });
            
            testButton.addEventListener('click', function() {
                const weight = slider.value / 100;
                
                // Simple neural network calculation
                const result = Math.max(0, weight * 0.8); // ReLU activation
                outputNeuron.textContent = result.toFixed(2);
                
                if (result > 0.7) {
                    outputNeuron.style.background = 'linear-gradient(135deg, #00cc8e, #00aa75)';
                    if (!gameState.objectives[2]) {
                        completeObjective(2);
                        showNotification('Neural network correctly configured!', 'success');
                    }
                } else {
                    outputNeuron.style.background = 'linear-gradient(135deg, #27479d, #00cc8e)';
                }
            });
        }
        
        // Setup bias challenge
        function setupBiasChallenge() {
            const approveButtons = document.querySelectorAll('.approve-btn');
            const denyButtons = document.querySelectorAll('.deny-btn');
            const results = {
                groupA: { total: 0, approved: 0 },
                groupB: { total: 0, approved: 0 }
            };
            
            approveButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const profileId = this.dataset.profile;
                    const card = this.closest('.profile-card');
                    const demographic = card.querySelector('.profile-demographic').textContent;
                    
                    if (demographic.includes('Group A')) {
                        results.groupA.total++;
                        results.groupA.approved++;
                    } else {
                        results.groupB.total++;
                        results.groupB.approved++;
                    }
                    
                    updateBiasResults();
                    this.disabled = true;
                    this.textContent = 'Approved';
                });
            });
            
            denyButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const profileId = this.dataset.profile;
                    const card = this.closest('.profile-card');
                    const demographic = card.querySelector('.profile-demographic').textContent;
                    
                    if (demographic.includes('Group A')) {
                        results.groupA.total++;
                    } else {
                        results.groupB.total++;
                    }
                    
                    updateBiasResults();
                    this.disabled = true;
                    this.textContent = 'Denied';
                });
            });
            
            function updateBiasResults() {
                const rateA = results.groupA.total ? (results.groupA.approved / results.groupA.total * 100).toFixed(0) : 0;
                const rateB = results.groupB.total ? (results.groupB.approved / results.groupB.total * 100).toFixed(0) : 0;
                
                document.getElementById('approval-rate-a').textContent = `${rateA}%`;
                document.getElementById('approval-rate-b').textContent = `${rateB}%`;
                
                const biasLevel = Math.abs(rateA - rateB);
                document.getElementById('bias-level').textContent = `${biasLevel}%`;
                
                if (biasLevel > 30) {
                    document.getElementById('bias-level').style.color = '#ff6b6b';
                    showNotification('High bias detected! Adjust your approach.', 'warning');
                } else if (biasLevel < 10) {
                    document.getElementById('bias-level').style.color = '#00cc8e';
                    if (!gameState.objectives[2]) {
                        completeObjective(2);
                        showNotification('Bias level acceptable!', 'success');
                    }
                } else {
                    document.getElementById('bias-level').style.color = '#27479d';
                }
            }
        }
        
        // Setup privacy challenge
        function setupPrivacyChallenge() {
            const dataCells = document.querySelectorAll('.data-cell');
            const cloakButton = document.getElementById('apply-cloak');
            
            dataCells.forEach(cell => {
                cell.addEventListener('click', function() {
                    this.classList.toggle('pii');
                });
            });
            
            cloakButton.addEventListener('click', function() {
                const piiCells = document.querySelectorAll('.data-cell.pii');
                let protectedCount = 0;
                
                piiCells.forEach(cell => {
                    cell.classList.remove('pii');
                    cell.classList.add('protected');
                    protectedCount++;
                });
                
                showNotification(`Protected ${protectedCount} PII data items!`, 'success');
                
                if (protectedCount >= 5) {
                    if (!gameState.objectives[2]) {
                        completeObjective(2);
                    }
                }
            });
        }
        
        // Setup prompt challenge
        function setupPromptChallenge() {
            const promptInput = document.getElementById('prompt-input');
            const submitButton = document.getElementById('submit-prompt');
            const promptResult = document.getElementById('prompt-result');
            
            submitButton.addEventListener('click', function() {
                const prompt = promptInput.value.toLowerCase();
                
                if (prompt.includes('violent') || prompt.includes('harmful') || prompt.includes('illegal')) {
                    promptResult.innerHTML = "<span style='color:#ff6b6b'>Warning: This prompt may generate harmful content. Please revise.</span>";
                    showNotification('Prompt flagged for harmful content', 'error');
                } else if (prompt.includes('story') || prompt.includes('write') || prompt.includes('create')) {
                    promptResult.innerHTML = "Once upon a time, there was a robot named R-7 who discovered the joy of helping others. R-7 learned that kindness was not just about following rules, but about understanding and caring for others' feelings. Through small acts of service, R-7 became the most beloved robot in the neighborhood.";
                    if (!gameState.objectives[2]) {
                        completeObjective(2);
                        showNotification('Prompt successfully generated ethical content!', 'success');
                    }
                } else {
                    promptResult.innerHTML = "I can help with that! Could you provide more specific details about what you're looking for?";
                }
            });
        }
        
        // Setup capstone challenge
        function setupCapstoneChallenge() {
            const stepButtons = document.querySelectorAll('.step-btn');
            let completedSteps = 0;
            
            stepButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const step = this.dataset.step;
                    const stepElement = this.closest('.step');
                    stepElement.style.background = 'rgba(0, 204, 142, 0.1)';
                    this.textContent = 'Completed';
                    this.disabled = true;
                    completedSteps++;
                    
                    if (completedSteps === 4) {
                        if (!gameState.objectives[2]) {
                            completeObjective(2);
                            showNotification('Capstone project completed!', 'success');
                        }
                        showLevelComplete();
                    }
                });
            });
        }
        
        // Update XP display
        function updateXPDisplay() {
            xpCounter.textContent = gameState.xp.toLocaleString();
        }
        
        // Show notification
        function showNotification(message, type = 'info') {
            notification.className = 'notification show ' + type;
            notification.querySelector('.notification-content').textContent = message;
            
            setTimeout(() => {
                notification.className = 'notification';
            }, 3000);
        }
        
        // Change level
        function changeLevel(direction) {
            if (direction === 'next') {
                if (gameState.currentLevel < levels.length) {
                    gameState.currentLevel++;
                }
            } else if (direction === 'prev') {
                if (gameState.currentLevel > 1) {
                    gameState.currentLevel--;
                }
            }
            
            // Reset game state for new level
            resetGameState();
            updateLevelDisplay();
            updateObjectivesDisplay();
            updateProgress();
            highlightCompletedLevels();
            renderChallenge();
            showNotification(`Now playing: ${levels[gameState.currentLevel - 1].title}`, 'info');
        }
        
        // Reset game state
        function resetGameState() {
            gameState.playerPosition = { x: 150, y: 150 };
            gameState.dataPackets = [
                { id: 1, x: 100, y: 100, collected: false, concept: "Algorithm" },
                { id: 2, x: 200, y: 80, collected: false, concept: "Logic" },
                { id: 3, x: 250, y: 180, collected: false, concept: "Sequence" },
                { id: 4, x: 120, y: 220, collected: false, concept: "Condition" }
            ];
            gameState.collectedConcepts = [];
            gameState.objectives = {
                1: false,
                2: false,
                3: false
            };
            gameState.challengeCompleted = false;
        }
        
        // Update level display
        function updateLevelDisplay() {
            const level = levels[gameState.currentLevel - 1];
            document.querySelector('.level-icon').textContent = level.id;
            document.querySelector('.level-title').textContent = level.title;
            document.querySelector('.level-desc').textContent = level.description;
        }
        
        // Update objectives display
        function updateObjectivesDisplay() {
            const level = levels[gameState.currentLevel - 1];
            const objectives = level.objectives;
            objectivesList.innerHTML = '';
            objectives.forEach((obj, index) => {
                const li = document.createElement('li');
                li.className = 'objective-item';
                li.id = `obj-${index + 1}`;
                li.innerHTML = `
                    <div class="objective-check"></div>
                    <div class="objective-text">${obj}</div>
                `;
                objectivesList.appendChild(li);
                
                // Update completion status
                if (gameState.objectives[index + 1]) {
                    li.classList.add('completed');
                }
            });
        }
        
        // Update progress bar
        function updateProgress() {
            // Calculate progress based on completed levels and current level objectives
            const completedLevelsCount = gameState.completedLevels.length;
            const totalLevels = levels.length;
            
            // If current level is completed, add it to completed levels
            if (gameState.objectives[3] && !gameState.completedLevels.includes(gameState.currentLevel)) {
                gameState.completedLevels.push(gameState.currentLevel);
            }
            
            // Calculate progress percentage
            const progress = (gameState.completedLevels.length / totalLevels) * 100;
            progressFill.style.width = `${progress}%`;
            progressPercent.textContent = `${Math.round(progress)}%`;
        }
        
        // Highlight completed levels
        function highlightCompletedLevels() {
            // Remove all completed classes first
            sphereCards.forEach(card => {
                card.classList.remove('completed');
            });
            
            // Add completed class to completed levels
            gameState.completedLevels.forEach(levelId => {
                const card = document.querySelector(`.sphere-card[data-sphere="${levelId}"]`);
                if (card) {
                    card.classList.add('completed');
                }
            });
        }
        
        // Complete objective
        function completeObjective(id) {
            if (!gameState.objectives[id]) {
                gameState.objectives[id] = true;
                const objElement = document.getElementById(`obj-${id}`);
                if (objElement) {
                    objElement.classList.add('completed');
                }
                
                // Award XP
                let xpGain = 0;
                switch(id) {
                    case 1: xpGain = 50; break;
                    case 2: xpGain = 100; break;
                    case 3: xpGain = 150; break;
                }
                
                if (xpGain > 0) {
                    gameState.xp += xpGain;
                    updateXPDisplay();
                    showNotification(`Objective completed! +${xpGain} XP`, 'success');
                }
                
                // Update progress when objective is completed
                updateProgress();
                highlightCompletedLevels();
            }
        }
        
        // Show level complete
        function showLevelComplete() {
            if (gameState.challengeCompleted) return;
            
            gameState.challengeCompleted = true;
            completeObjective(3);
            
            const levelComplete = document.createElement('div');
            levelComplete.className = 'level-complete';
            levelComplete.innerHTML = `
                <div class="level-complete-title">Level Complete!</div>
                <div class="level-complete-text">You've mastered the concepts of ${levels[gameState.currentLevel - 1].aiConcept}</div>
                <button class="next-level-btn" id="level-complete-next">Continue to Next Level</button>
            `;
            
            document.querySelector('.dashboard-panel').appendChild(levelComplete);
            
            document.getElementById('level-complete-next').addEventListener('click', function() {
                levelComplete.remove();
                changeLevel('next');
            });
        }
        
        // Start mission
        function startMission() {
            gameState.missionStarted = true;
            challengeArea.style.display = 'block';
            showNotification('Challenge started successfully!', 'success');
        }
        
        // Setup event listeners
        function setupEventListeners() {
            // Start mission button
            startMissionBtn.addEventListener('click', function() {
                this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Initializing Challenge...';
                setTimeout(() => {
                    this.innerHTML = '<i class="fas fa-check"></i> Challenge Started!';
                    this.style.background = 'linear-gradient(135deg, #00cc8e, #00aa75)';
                    startMission();
                }, 1500);
            });
            
            // Avatar click
            avatar.addEventListener('click', function() {
                this.textContent = String.fromCharCode(65 + Math.floor(Math.random() * 26));
                showNotification('Avatar updated!', 'info');
            });
            
            // Level navigation
            nextLevelBtn.addEventListener('click', () => changeLevel('next'));
            prevLevelBtn.addEventListener('click', () => changeLevel('prev'));
            
            // Sphere cards
            sphereCards.forEach(card => {
                card.addEventListener('click', function() {
                    if (!gameState.missionStarted) {
                        startMission();
                    }
                    
                    const sphereId = parseInt(this.dataset.sphere);
                    gameState.currentLevel = sphereId;
                    resetGameState();
                    updateLevelDisplay();
                    updateObjectivesDisplay();
                    updateProgress();
                    highlightCompletedLevels();
                    renderChallenge();
                    showNotification(`Now playing: ${levels[sphereId - 1].title}`, 'info');
                });
            });
            
            // Sphere selector
            document.querySelectorAll('.sphere-option').forEach((option, index) => {
                option.addEventListener('click', function() {
                    document.querySelectorAll('.sphere-option').forEach(opt => {
                        opt.classList.remove('active');
                    });
                    this.classList.add('active');
                    gameState.currentLevel = index + 1;
                    resetGameState();
                    updateLevelDisplay();
                    updateObjectivesDisplay();
                    updateProgress();
                    highlightCompletedLevels();
                    renderChallenge();
                    showNotification(`Mission path set to: ${this.textContent}`, 'info');
                });
            });
        }
        
        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', initGame);
    </script>
</body>
</html>
